#!/usr/bin/env python
#
# Simple test script to try and interact with BLE devices
#

import argparse

import dbus
import struct
import time

def dbus2string(array):
    s = ''
    for ch in array:
        s += chr(ch)
    return s

def dbus2float32t(array):
    """Dbus returns us a "dbus.Array", we want the float from inside that
    """
    s = dbus2string(array)
    return (struct.unpack('<f',s))[0]

def dbus2uint32t(array):
    s = dbus2string(array)
    return (struct.unpack('<I',s))[0]

def dbus2uint8t(array):
    if array:
        return int(array[0])
    else:
        return None

def dbus2hexdigits(array):
    s = ''
    for ch in array[::-1]:
        s += format(ch,'02x')
    return s

def dbus2hexdump(array):
    s = ''
    h = ''
    for ch in array:
        if ch in range(0x20,0x7e):
            s += chr(ch)
        else:
            s += ' '
        h += hex(ch) + ','
    return h+' '+s

gatt_list = {
    # Standard things
    '00002a00-0000-1000-8000-00805f9b34fb': { 'func': dbus2string,
        'desc': 'device_name', 'category': 'string',
    },
    '00002a19-0000-1000-8000-00805f9b34fb': { 'func': dbus2uint8t,
        'desc': 'Battery', 'category': 'normal',
    },
    '00002a23-0000-1000-8000-00805f9b34fb': { 'func': dbus2hexdigits,
        'desc': 'system_id', 'category': 'id',
    },
    '00002a24-0000-1000-8000-00805f9b34fb': { 'func': dbus2string,
        'desc': 'model_number', 'category': 'string',
    },
    '00002a25-0000-1000-8000-00805f9b34fb': { 'func': dbus2string,
        'desc': 'serial_number', 'category': 'string',
    },
    '00002a26-0000-1000-8000-00805f9b34fb': { 'func': dbus2string,
        'desc': 'firmware_revision', 'category': 'string',
    },
    '00002a27-0000-1000-8000-00805f9b34fb': { 'func': dbus2string,
        'desc': 'hardware_revision', 'category': 'string',
    },
    '00002a28-0000-1000-8000-00805f9b34fb': { 'func': dbus2string,
        'desc': 'software_revision', 'category': 'string',
    },
    '00002a29-0000-1000-8000-00805f9b34fb': { 'func': dbus2string,
        'desc': 'manufacturer_name', 'category': 'string',
    },

    # Sensirion SmartGadget
    '00001235-b38d-4985-720e-0f993a68ee41': { 'func': dbus2float32t,
        'desc': 'Humidity', 'category': 'normal',
    },
    '00002235-b38d-4985-720e-0f993a68ee41': { 'func': dbus2float32t,
        'desc': 'Temperature', 'category': 'normal',
    },
    '0000f239-b38d-4985-720e-0f993a68ee41': { 'func': dbus2uint32t,
        'desc': 'logger_interval', 'category': 'misc',
    },
}


class Characteristic:
    """Representing a GATT characteristic
    """

    def __init__(self, bus, prop, path):
        # FIXME - there should only be one instance for any path, we should
        # keep a class dictionary and return refs to existing objects
        # if found

        self.path = path
        self.prop = prop

        proxy = bus.get_object('org.bluez',path)
        self.char = dbus.Interface(proxy,
                              dbus_interface="org.bluez.GattCharacteristic1")

        # properties that will not change
        self.uuid = self.prop.Get(self.path, 'org.bluez.GattCharacteristic1','UUID')

        if self.uuid in gatt_list:
            self.entry = gatt_list[self.uuid]
            self.known = True
        else:
            self.entry = {
                'func': dbus2hexdump,
                'desc': 'UUID:'+self.uuid,
                'category': 'unknown',
            }
            self.known = False

        self.desc = self.entry['desc']
        self.category = self.entry['category']

    def read(self):
        try:
            value = self.char.ReadValue({'none': 0})
        except dbus.exceptions.DBusException:
            self.prop.invalidate()
            return None
        return self.entry['func'](value)

    def device_path(self):
        """Follow the pointers in the objects to find the parent device
        """
        service_path = self.prop.Get(self.path, 'org.bluez.GattCharacteristic1','Service')
        device_path = self.prop.Get(service_path, 'org.bluez.GattService1','Device')
        return device_path

    def device(self,bus):
        return Device(bus,self.prop,self.device_path())


class Device:
    """Representing a bluetooth device
    """

    def __init__(self, bus, prop, path):
        # FIXME - there should only be one instance for any path, we should
        # keep a class dictionary and return refs to existing objects
        # if found

        self.path = path
        self.prop = prop

        proxy = bus.get_object('org.bluez',path)
        self.dev = dbus.Interface(proxy,
                              dbus_interface="org.bluez.Device1")

        # properties that will not change
        self.address = self.prop.Get(self.path,'org.bluez.Device1','Address')
        self.name = self.prop.Get(self.path,'org.bluez.Device1','Alias')
        self.uuids = self.prop.Get(self.path,'org.bluez.Device1','UUIDs')
        self.appearance = self.prop.Get(self.path,'org.bluez.Device1','Appearance')

    def connected(self):
        return self.prop.Get(self.path,'org.bluez.Device1','Connected')

    def servicesresolved(self):
        return self.prop.Get(self.path,'org.bluez.Device1','ServicesResolved')

    def Connect(self):
        self.prop.invalidate()
        try:
            self.dev.Connect()
        except dbus.exceptions.DBusException as e:
            print " Error: {}".format(e)
            return None
        else:
            return 1


class PropertyCache:
    """Keep a cache of the managed objects
    """
    # Theoretically, I could listen for signals and keep a local model of
    # the properties updated with that.  But that would need an event loop
    # and (I think) more complextiy
    #
    # TODO - this is a hacky singleton, investigate python best practices

    def __init__(self, bus):
        # TODO: do we care that this hardcodes the destination on what is
        # a generic call?
        proxy = bus.get_object('org.bluez','/')

        self.manager = dbus.Interface(proxy,
                          dbus_interface="org.freedesktop.DBus.ObjectManager")
        self.valid = 0

    def _validate(self):
        """Ensure that the cache is currently valid
           This could be a more complex cache validity system, but right
           now, it can simply throw away the whole cache
        """
        if not self.valid:
            self.all_objects = self.manager.GetManagedObjects()
            self.valid = 1

    def invalidate(self):
        self.valid = 0

    def Get(self,path,interface,property):
        self._validate()
        if path not in self.all_objects:
            return None
        if interface not in self.all_objects[path]:
            return None
        if property not in self.all_objects[path][interface]:
            return None
        return self.all_objects[path][interface][property]

    def interface2paths(self,interface):
        """Return the set of all paths that have the given interface
        """
        self._validate()
        result = set()
        for path, interfaces in self.all_objects.iteritems():
            if interface in interfaces:
                result.add(path)
        return result


def list_devices(bus,prop):
    devices = prop.interface2paths('org.bluez.Device1')
    for path in devices:
        device = Device(bus,prop,path)

        if device.name is not None:
            name = device.name
        else:
            name = "\N"

        # TODO
        # - name can contain unicode, and is correctly typed as a unicode
        # string, but running format() with a unicode param fails with
        # a codec error..
        print device.address, name
        print "  Connected={} ServicesResolved={} Appearance={}".format(
            device.connected(),
            device.servicesresolved(),
            device.appearance
        )

        for uuid in device.uuids:
            print "  {}".format(uuid)


def main(args):
    """ TODO:
        - different output representations (the current one and a logger)
        - add a loop, repeatedly fetching
        - stable output order (important in loop+logger case)
    """
    bus = dbus.SystemBus()

    prop = PropertyCache(bus)

    # If a device is already connected, we probably already have
    # the services.  If it is not connected, bluez might have a cached
    # copy of the services.  If neither applies, connect to the
    # device (which I believe will trigger a service resolve)
    devices = prop.interface2paths('org.bluez.Device1')
    device_list = []

    # TODO:
    # - if the device is reachable via two different hci interfaces, we
    # only need one path to work.  Come up with a plan for this

    # first, build the list of devices we need to hit
    for path in devices:
        device = Device(bus,prop,path)
        if not device.connected() and not device.servicesresolved():
            device_list.append(device)

    # then try to connect to them (and thus invalidate their properties)
    new_device_list = []
    for device in device_list:
        print "Connecting", device.path
        connected = device.Connect()
        if connected:
            new_device_list.append(device)
    device_list = new_device_list

    # TODO:
    # - if all of the devices we wanted to connect to failed, we might
    # want to power on/off the hci interface

    # for each device that seemed to connect, wait a bit for their services
    wait_end = time.time() + 10
    while device_list and time.time()<wait_end:
        time.sleep(1)
        prop.invalidate()
        new_device_list = []
        for device in device_list:
            if not device.servicesresolved():
                print "Waiting for ServicesResolved from", device.path
                new_device_list.append(device)
        device_list = new_device_list
        print

    if args.verbose:
        list_devices(bus,prop)
        print

    tree = {}

    # first, create a hit list of all the characteristics we want
    all_gatt = prop.interface2paths('org.bluez.GattCharacteristic1')
    for path in all_gatt:
        object = Characteristic(bus,prop,path)

        if args.verbose>2:
            print "Found",object.path
            print " UUID",object.uuid

        want = False
        if object.category in args.category:
            want = True
        if object.known and 'all' in args.category:
            want = True
        if args.fetchall:
            want = True

        if not want:
            continue

        device = object.device(bus)
        if device.path not in tree:
            tree[device.path] = {}

        tree[device.path][object.path] = object

    # since we might change the tree, we need to iterate over a snapshot here
    device_paths = tree.keys()
    # confirm that all the devices are connected
    for device_path in device_paths:
        device = Device(bus,prop,device_path)

        # try to ensure that this device is still connected
        if not device.connected():
            print " Connecting", device.path
            if not device.Connect():
                # we failed the connection, delete this device
                print "  Failed"
                tree.pop(device.path)

    # finally, walk the tree
    for device_path,chars in tree.iteritems():
        device = Device(bus,prop,device_path)
        print "Device",device.address
        for char_path, object in chars.iteritems():
            if args.verbose>1:
                print " Path",object.path
                print " UUID",object.uuid

            print "  {} = {}".format(object.desc,object.read())


def do_options():
    a = argparse.ArgumentParser('Explore Blootooth Low Energy devices')
    a.add_argument('-v','--verbose', action='count', default=0)
    a.add_argument('--fetchall', default=False,
        action="store_true", help="Fetch all characteristics")
    a.add_argument('--category',
        action="append", help="Add a category of characteristics to fetch")

    args = a.parse_args()

    if args.category is None:
        args.category = ('normal')

    return args


if __name__ == '__main__':
    args = do_options()
    main(args)
