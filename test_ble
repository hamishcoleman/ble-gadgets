#!/usr/bin/env python
#
# Simple test script to try and interact with BLE devices
#

import argparse

import dbus
import time

import os
import sys

# Ensure that we look for any modules in our local lib dir.  This allows simple
# testing and development use.  It also does not break the case where the lib
# has been installed properly on the normal sys.path
sys.path.insert(0,
                os.path.join(os.path.dirname(os.path.abspath(__file__)), 'lib')
                )
# I would use site.addsitedir, but it does an append, not insert

import hc.dbus.Property
import hc.bluetooth.GATT

class Characteristic:
    """Representing a GATT characteristic
    """

    def __init__(self, bus, prop, path):
        # FIXME - there should only be one instance for any path, we should
        # keep a class dictionary and return refs to existing objects
        # if found

        self.path = path
        self.prop = prop

        proxy = bus.get_object('org.bluez',path)
        self.char = dbus.Interface(proxy,
                              dbus_interface="org.bluez.GattCharacteristic1")

        # properties that will not change
        self.uuid = self.prop.Get(self.path, 'org.bluez.GattCharacteristic1','UUID')

        if self.uuid in hc.bluetooth.GATT.gatt_list:
            self.entry = hc.bluetooth.GATT.gatt_list[self.uuid]
            self.known = True
        else:
            self.entry = {
                'func': hc.bluetooth.GATT.dbus2hexdump,
                'desc': 'UUID:'+self.uuid,
                'category': 'unknown',
            }
            self.known = False

        self.desc = self.entry['desc']
        self.category = self.entry['category']
        self.exception = None

    def convertraw(self,raw):
        """Given the raw read results, convert it to a meaningful object
        """
        return self.entry['func'](raw)

    def read(self):
        try:
            value = self.char.ReadValue({'none': 0})
        except dbus.exceptions.DBusException as e:
            self.prop.invalidate()
            self.exception = e
            return None
        return self.convertraw(value)

    def device_path(self):
        """Follow the pointers in the objects to find the parent device
        """
        service_path = self.prop.Get(self.path, 'org.bluez.GattCharacteristic1','Service')
        device_path = self.prop.Get(service_path, 'org.bluez.GattService1','Device')
        return device_path


class Device:
    """Representing a bluetooth device
    """

    def __init__(self, bus, prop, path):
        # FIXME - there should only be one instance for any path, we should
        # keep a class dictionary and return refs to existing objects
        # if found

        self.path = path
        self.prop = prop

        proxy = bus.get_object('org.bluez',path)
        self.dev = dbus.Interface(proxy,
                              dbus_interface="org.bluez.Device1")

        # properties that will not change
        self.address = self.prop.Get(self.path,'org.bluez.Device1','Address')
        self.name = self.prop.Get(self.path,'org.bluez.Device1','Alias')
        self.uuids = self.prop.Get(self.path,'org.bluez.Device1','UUIDs')
        self.appearance = self.prop.Get(self.path,'org.bluez.Device1','Appearance')
        self.exception = None

    def isBLE(self):
        """FIXME: bluez appears not to have a way to know this for sure
        """
        # All the devices I have looked at match this filter, but I
        # cannot find anything that says that only BLE devices have
        # an "Appearance"
        if self.appearance is not None:
            return True
        return False

    def connected(self):
        return self.prop.Get(self.path,'org.bluez.Device1','Connected')

    def servicesresolved(self):
        return self.prop.Get(self.path,'org.bluez.Device1','ServicesResolved')

    def Connect(self):
        self.prop.invalidate()
        try:
            self.dev.Connect()
        except dbus.exceptions.DBusException as e:
            self.exception = e
            return None
        else:
            return 1


def list_devices(bus,prop):
    devices = prop.interface2paths('org.bluez.Device1')
    for path in devices:
        device = Device(bus,prop,path)

        if device.name is not None:
            name = device.name
        else:
            name = "\N"

        # TODO
        # - name can contain unicode, and is correctly typed as a unicode
        # string, but running format() with a unicode param fails with
        # a codec error..
        print device.address, name
        print "  Connected={} ServicesResolved={} Appearance={}".format(
            device.connected(),
            device.servicesresolved(),
            device.appearance
        )

        for uuid in device.uuids:
            print "  {}".format(uuid)


def phase_find_new_devices(bus,prop):
    devices = prop.interface2paths('org.bluez.Device1')
    device_list = []

    # New devices are ones that are not connected.  We want to see the
    # services, so we only care about ones that dont have their services
    # resolved

    # TODO:
    # - if the device is reachable via two different hci interfaces, we
    # only need one path to work.  Come up with a plan for this

    # build the list of devices we need to hit
    for path in devices:
        device = Device(bus,prop,path)
        if not device.connected() and not device.servicesresolved():
            device_list.append(device)
    return device_list


def phase_connect_new_devices(args,devices):
    # then try to connect to them (and thus invalidate their properties)
    new_device_list = []
    for device in devices:
        if not device.isBLE() and not args.also_nonble:
            # try to exclude non BLE devices
            continue

        print "Connecting", device.path
        connected = device.Connect()
        if connected:
            new_device_list.append(device)
    return new_device_list


def phase_wait_for_servicesresolved(prop,devices):
    # for each device that seemed to connect, wait a bit for their services
    wait_end = time.time() + 10
    while devices and time.time()<wait_end:
        time.sleep(1)
        prop.invalidate()
        new_device_list = []
        for device in devices:
            if not device.servicesresolved():
                print "Waiting for ServicesResolved from", device.path
                new_device_list.append(device)
        devices = new_device_list
        print


def phase_characteristics_list(args,bus,prop):
    tree = {}

    # first, create a hit list of all the characteristics we want
    all_gatt = prop.interface2paths('org.bluez.GattCharacteristic1')
    for path in all_gatt:
        object = Characteristic(bus,prop,path)

        if args.verbose>2:
            print "Found",object.path
            print " UUID",object.uuid

        want = False
        if object.category in args.category:
            want = True
        if object.known and 'all' in args.category:
            want = True
        if args.fetchall:
            want = True

        device = Device(bus,prop,object.device_path())
        if not device.isBLE() and not args.also_nonble:
            # try to exclude non BLE devices
            want = False

        if not want:
            continue

        # TODO:
        # - if the hci interface is powered down, skip this characteristic

        if device.path not in tree:
            tree[device.path] = {}

        tree[device.path][object.path] = object
    return tree


def phase_connect_devices(bus,prop,tree):
    # since we might change the tree, we need to iterate over a snapshot here
    device_paths = tree.keys()
    # confirm that all the devices are connected
    for device_path in device_paths:
        device = Device(bus,prop,device_path)

        # try to ensure that this device is still connected
        if not device.connected():
            print " Connecting", device.path
            if not device.Connect():
                # we failed the connection, delete this device
                print "  Failed"
                tree.pop(device.path)


def phase_fetch(bus,prop,tree):
    # finally, walk the tree
    for device_path,chars in tree.iteritems():
        device = Device(bus,prop,device_path)
        print "Device",device.address
        for char_path, object in chars.iteritems():
            if args.verbose>1:
                print " Path",object.path
                print " UUID",object.uuid

            print "  {} = {}".format(object.desc,object.read())


def main(args):
    """ TODO:
        - different output representations (the current one and a logger)
        - add a loop, repeatedly fetching
        - stable output order (important in loop+logger case)
    """
    bus = dbus.SystemBus()

    prop = hc.dbus.Property.Cache(bus)

    device_list = phase_find_new_devices(bus,prop)

    if args.verbose:
        print time.time(),"Phase 1: Connect new devices"

    device_list = phase_connect_new_devices(args,device_list)

    # TODO:
    # - if all of the devices we wanted to connect to failed, we might
    # want to power on/off the hci interface (and try again?)

    if args.verbose:
        print time.time(),"Phase 2: Wait for ServicesResolved"

    phase_wait_for_servicesresolved(prop,device_list)

    if args.verbose:
        list_devices(bus,prop)
        print

    tree = phase_characteristics_list(args,bus,prop)

    if args.verbose:
        print time.time(),"Phase 3: Confirm needed Devices are Connected"

    phase_connect_devices(bus,prop,tree)

    if args.verbose:
        print time.time(),"Phase 4: Fetch Characteristic values"

    phase_fetch(bus,prop,tree)

    if args.verbose:
        print time.time(),"Phase 5: ends"


def do_options():
    a = argparse.ArgumentParser('Explore Blootooth Low Energy devices')
    a.add_argument('-v','--verbose', action='count', default=0)
    a.add_argument('--fetchall', default=False,
        action="store_true", help="Fetch all characteristics")
    a.add_argument('--also_nonble', default=False,
        action="store_true", help="Also include non BLE devices")
    a.add_argument('--category',
        action="append", help="Add a category of characteristics to fetch")

    args = a.parse_args()

    if args.category is None:
        args.category = ('normal')

    return args


if __name__ == '__main__':
    args = do_options()
    main(args)
