#!/usr/bin/env python
#
# Simple test script to try and interact with BLE devices
#

import argparse

import dbus
import struct

def dbus2float32t(array):
    """Dbus returns us a "dbus.Array", we want the float from inside that
    """
    s = ''
    for ch in array:
        s += chr(ch)
    return (struct.unpack('<f',s))[0]

def dbus2uint8t(array):
    return int(array[0])

gatt_list = {
    '00002a19-0000-1000-8000-00805f9b34fb': {
        'func': dbus2uint8t,
        'desc': 'Battery',
    },
    '00002235-b38d-4985-720e-0f993a68ee41': {
        'func': dbus2float32t,
        'desc': 'Temperature',
    },
    '00001235-b38d-4985-720e-0f993a68ee41': {
        'func': dbus2float32t,
        'desc': 'Humidity',
    },
}


def list_paths(objects,interface):
    result = {}
    for path, interfaces in objects.iteritems():
        if interface in interfaces:
            result[path] = interfaces
    return result


def list_devices(all_objects):
    btdevices = list_paths(all_objects,'org.bluez.Device1')
    for path, interface in btdevices.iteritems():
        val = interface['org.bluez.Device1']
        print "val: {}".format(val)
        print val['Address'],val['Name'],val['Connected']
        for uuid in val['UUIDs']:
            print "\t",uuid


def gattchar2devicepath(all_objects, gattcharpath):
    """Follow the pointers in the objects dictionary to find the parent
       device, given the gatt characteristic path
    """
    gattchar = all_objects[gattcharpath]['org.bluez.GattCharacteristic1']
    service_path = gattchar['Service']
    servicechar = all_objects[service_path]['org.bluez.GattService1']
    device_path = servicechar['Device']
    return device_path


def main(args):
    """ TODO:
        - note that this only works after bluetoothctl has configured and
          connected to the device
    """
    bus_name="org.bluez"
    bus = dbus.SystemBus()

    bluez = bus.get_object(bus_name,'/')
    all_objects = dbus.Interface(bluez, "org.freedesktop.DBus.ObjectManager").GetManagedObjects()

    if args.verbose:
        list_devices(all_objects)

    # TODO:
    # - if there are devices that are not connected and not ServicesResolved
    # then we will not know their Gatt list, so connect them first..

    all_gatt = list_paths(all_objects,'org.bluez.GattCharacteristic1')
    for path, interface in all_gatt.iteritems():
        gatt = interface['org.bluez.GattCharacteristic1']
        uuid = gatt['UUID']

        if uuid not in gatt_list:
            if args.verbose>2:
                print "Path",path
                print " UUID",uuid
            continue

        # get this value
        entry = gatt_list[uuid]
        print "Path",path

        if args.verbose>1:
            print " UUID",uuid

        device_path = gattchar2devicepath(all_objects, path)

        # use the cached property
        connected = all_objects[device_path]['org.bluez.Device1']['Connected']

        # # alternate that doesnt use the cached property
        # device_prop = dbus.Interface(bus.get_object(bus_name,device_path),
        #                     dbus_interface="org.freedesktop.DBus.Properties")
        # connected = device_prop.Get('org.bluez.Device1','Connected')

        # try to ensure that this device is still connected
        if not connected:
            print " Connecting"
            device = dbus.Interface(bus.get_object(bus_name,device_path),
                        dbus_interface="org.bluez.Device1")
            device.Connect()

        proxy = bus.get_object(bus_name,path)
        char = dbus.Interface(proxy,
                                dbus_interface="org.bluez.GattCharacteristic1")
        value = char.ReadValue({'none': 0})
        value = entry['func'](value)
        print "  ",entry['desc'],value


def do_options():
    a = argparse.ArgumentParser('Explore Blootooth Low Energy devices')
    a.add_argument('-v','--verbose', action='count', default=0)

    return a.parse_args()


if __name__ == '__main__':
    args = do_options()
    main(args)
