#!/usr/bin/env python3
#
# Record measurement sent from an Owon B35T+ multimeter

import argparse
import dbus

from dbus.mainloop.glib import DBusGMainLoop
from gi.repository import GLib

import os
import sys

# ungh - a hacky global var
hack_loop = None

# Ensure that we look for any modules in our local lib dir.  This allows simple
# testing and development use.  It also does not break the case where the lib
# has been installed properly on the normal sys.path
sys.path.insert(0,
                os.path.join(os.path.dirname(os.path.abspath(__file__)), 'lib')
                )
# I would use site.addsitedir, but it does an append, not insert

import hc.dbus.Property
import hc.bluetooth.GATT
import hc.bluetooth.GATT.OWON
import time

def glib_runonce(func,*args):
    def runonce(func,*args):
        func(*args)
        return False
    GLib.timeout_add(0,runonce,func,*args)

def cb_regular(device, value):
    print("{} {} {}".format(
        value.timestamp,
        value.value,
        value,
    ))
    # if we need to know which device this reading is from: device.path

def main():
    bus = dbus.SystemBus()
    prop = hc.dbus.Property.Cache(bus)

    devs = hc.bluetooth.GATT.OWON.Device.all(bus, prop)

    if not devs:
        print('# no devices found')
        hack_loop.quit()
        return None

    for dev in devs:
        d = dev.path

        print('#Found: ',d)
        # FIXME - connect to devices that are not online!?

        dev.RegularCallback(cb_regular)
        dev.measurement.StartNotify()

    print("\n#start dumping")
    return False

def do_options():
    a = argparse.ArgumentParser('Dump OWON')
    a.add_argument('-v','--verbose', action='count', default=0)

    args = a.parse_args()

    return args

if __name__ == '__main__':
    args = do_options()

    DBusGMainLoop (set_as_default=True)
    glib_runonce(main)
    loop = GLib.MainLoop()
    hack_loop = loop
    loop.run()

