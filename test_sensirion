#!/usr/bin/env python
#
#

import argparse
import struct
import dbus

from dbus.glib import DBusGMainLoop
from gi.repository import GLib

import os
import sys

# Ensure that we look for any modules in our local lib dir.  This allows simple
# testing and development use.  It also does not break the case where the lib
# has been installed properly on the normal sys.path
sys.path.insert(0,
                os.path.join(os.path.dirname(os.path.abspath(__file__)), 'lib')
                )
# I would use site.addsitedir, but it does an append, not insert

import hc.dbus.Property
import hc.bluetooth.GATT
import time

def main():
    def dump_signal(*args,**kwargs):
        # assert args[0] == org.bluez.GattCharacteristic1
        if 'Value' not in args[1]:
            return
        object = hc.bluetooth.GATT.Characteristic(bus,prop,kwargs['path'])
        print time.time(), object.uuid, hc.bluetooth.GATT.TypeHexDump.raw2value(args[1]['Value'])

    bus = dbus.SystemBus()
    prop = hc.dbus.Property.Cache(bus)

    bus.add_signal_receiver(dump_signal,'PropertiesChanged',
                path_keyword='path')

    all_gatt = prop.interface2paths('org.bluez.GattCharacteristic1')
    for path in all_gatt:
        object = hc.bluetooth.GATT.Characteristic(bus,prop,path)
        if object.uuid == '00002235-b38d-4985-720e-0f993a68ee41':
            print object.StartNotify()

        if object.uuid == '0000f235-b38d-4985-720e-0f993a68ee41':
            si_settime = object
        if object.uuid == '0000f236-b38d-4985-720e-0f993a68ee41':
            si_mintime = object
        if object.uuid == '0000f237-b38d-4985-720e-0f993a68ee41':
            si_maxtime = object
        if object.uuid == '0000f238-b38d-4985-720e-0f993a68ee41':
            si_sendlog = object

    now = time.time()*1000000
    si_settime.write(now)

    print 'min time=',si_mintime.read()
    print 'max time=',si_maxtime.read()

    si_sendlog.write(1)

    # now notifications should have a mix of 4 byte and larger ones, decode
    # the larger ones as history objects ...

    print "start dumping"

    #loop.quit()

def do_options():
    a = argparse.ArgumentParser('Download sensirion')
    a.add_argument('-v','--verbose', action='count', default=0)

    args = a.parse_args()

    return args

if __name__ == '__main__':
    args = do_options()

    DBusGMainLoop (set_as_default=True)
    GLib.timeout_add(1, main)    
    loop = GLib.MainLoop()
    loop.run()

