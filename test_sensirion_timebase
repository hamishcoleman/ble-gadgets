#!/usr/bin/env python
#
# Try to work out what is going on with the timestamps in the device

import argparse
import dbus

from dbus.glib import DBusGMainLoop
from gi.repository import GLib

import os
import sys

# Ensure that we look for any modules in our local lib dir.  This allows simple
# testing and development use.  It also does not break the case where the lib
# has been installed properly on the normal sys.path
sys.path.insert(0,
                os.path.join(os.path.dirname(os.path.abspath(__file__)), 'lib')
                )
# I would use site.addsitedir, but it does an append, not insert

import hc.dbus.Property
import hc.bluetooth.GATT
import hc.bluetooth.GATT.Sensirion
import time

def glib_runonce(func,*args):
    def runonce(func,*args):
        func(*args)
        return False
    GLib.timeout_add(0,runonce,func,*args)

db = {}
db['this'] = {}
db['prev'] = None

def do_fetch(dev):
    now = time.time()
    settime = int(now)

    frac = now - int(now)
    if frac <0.44:
        # It is unclear what is going on here
        # I think I am measuring the round-trip-latency and combining that
        # with some kind of edge-case rounding error - but this stops the
        # device maxtime dancing around..
        settime -= 1

    dev.settime(settime)

    db['this']['now'] = now
    #db['this']['min'] = dev.mintime.read()
    db['this']['max'] = dev.maxtime.read()
    db['this']['bat'] = dev.battery.read()

    if db['prev'] is not None:
        print "{:.6f} {:.6f} {:.6f} {} {:.6f} {:.6f} {:.6f}".format(
            now,
            settime,
            db['this']['max'],
            db['this']['bat'],

            now - db['prev']['now'],
            now - db['this']['max'],
            db['this']['max'] - db['prev']['max'],
        )
    else:
        print "# cache warmup"
        print "#now settime max bat delta.now delta.now-max delta.max"

    db['prev'] = db['this']
    db['this'] = {}
    return True

def main():

    bus = dbus.SystemBus()
    prop = hc.dbus.Property.Cache(bus)

    devs = hc.bluetooth.GATT.Sensirion.Device.all(bus, prop)

    if not devs:
        print '# no devices found'
        hack_loop.quit()
        return None

    for dev in devs:
        d = dev.path

        print '#Found: ',d
        GLib.timeout_add(0,do_fetch,dev)

def do_options():
    a = argparse.ArgumentParser('test sensirion timings')
    a.add_argument('-v','--verbose', action='count', default=0)

    args = a.parse_args()

    return args

if __name__ == '__main__':
    args = do_options()

    DBusGMainLoop (set_as_default=True)
    glib_runonce(main)
    loop = GLib.MainLoop()
    hack_loop = loop
    loop.run()

